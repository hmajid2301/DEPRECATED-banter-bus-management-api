image: golang

variables:
  DOCKER_DRIVER: overlay2

before_script:
  - go mod download

stages:
  - pre
  - test
  - build
  - publish
  - post

.mongo:
  services:
    - mongo:latest
  variables:
    MONGO_INITDB_ROOT_USERNAME: banterbus
    MONGO_INITDB_ROOT_PASSWORD: banterbus
    MONGO_INITDB_DATABASE: banterbus
  before_script:
    - go mod download
    - export BANTER_BUS_DB_HOST="mongo"

create:merge-request:
  image: registry.gitlab.com/gitlab-automation-toolkit/gitlab-auto-mr
  stage: pre
  before_script: []
  except:
    - master
    - tags
  script:
    - gitlab_auto_mr -t master -c WIP -d .gitlab/merge_request_templates/merge_request.md -r -s --use-issue-name

publish-docker:test:
  stage: pre
  only:
    - master
  image: docker
  services:
    - docker:dind
  before_script: []
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f docker/api/Dockerfile -t ${CI_REGISTRY_IMAGE}:test .
    - docker push ${CI_REGISTRY_IMAGE}:test

lint:
  stage: test
  only:
    - merge_request
  script:
    - go get -u github.com/mgechev/revive
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.32.2
    - make lint

format:check:
  stage: test
  only:
    - merge_request
  script:
    - go get -u github.com/segmentio/golines
    - if [[ $(make format | wc -c) -ne 0 ]]; then exit 1; fi

lint:commits:
  image: node
  stage: test
  only:
    - merge_request
  before_script: []
  script:
    - npm install -g @commitlint/cli @commitlint/config-conventional
    - git fetch origin ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
    - git fetch origin ${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
    - commitlint --from=origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME} --to=origin/${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}

lint:code-qualiy:
  stage: test
  only:
    - merge_request
    - master
  before_script:
    - apt update && apt install jq -y
    - curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.32.2
  script:
    - make code-quality | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    when: always
    reports:
      codequality: gl-code-quality-report.json

security:SAST:
  stage: test
  only:
    - merge_request
  script:
    - go get github.com/securego/gosec/v2/cmd/gosec
    - make sast

coverage:
  stage: test
  image: golang
  only:
    - merge_request
    - master
  extends:
    - .mongo
  script:
    - export BANTER_BUS_DB_HOST="mongo"
    - go get golang.org/x/tools/cmd/cover
    - go get github.com/t-yuki/gocover-cobertura
    - go get -u github.com/jstemmer/go-junit-report
    - make coverage 2>&1 | go-junit-report > junit.xml
    - gocover-cobertura < coverage.out > cobertura.xml
  after_script:
    - cat junit.xml | grep "coverage.statements.pct"
  coverage: '/value="\d+.\d+"/'
  artifacts:
      when: always
      reports:
          junit: junit.xml
          cobertura: cobertura.xml

update:openapi:
  stage: publish
  # only:
  #   - master
  allow_failure: true
  before_script:
    - git config --global user.email "bot@haseebmajid.dev"
    - git config --global user.name "Banter Bus Bot"
    - git remote set-url origin "https://gitlab-ci-token:$GIT_ACCESS_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git"
    - git remote -v
  script:
    - make update-openapi
    - git fetch origin ${CI_COMMIT_BRANCH}
    - git status
    - git add specs/openapi.json
    - 'git commit -m "docs: update openapi" -m "Commit by Banter Bus Bot. Update openapi.json."'
    - git push origin HEAD:feature/#43

create:gitlab:release:
  image: registry.gitlab.com/gitlab-automation-toolkit/gitlab-auto-release
  stage: post
  only:
    - /^release/.*$/
  before_script: []
  script:
    - gitlab_auto_release -c CHANGELOG.md -d "This was auto-generated by the gitlab-auto-release tool, https://gitlab.com/gitlab-automation-toolkit/gitlab-auto-release."
