openapi: 3.0.1
info:
  title: Banter Bus
  description: The API definition for the Banter Bus application.
  contact:
    email: hello@haseebmajid.dev
  version: 1.0.0
servers:
  - url: /api/v1
tags:
  - name: room
  - name: player
  - name: game
  - name: question
paths:
  /room:
    post:
      tags:
        - room
      summary: Create a new game room.
      operationId: create_room
      requestBody:
        description: What type of game room to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRoom"
            example:
              game_type: "quibly"
        required: true
      responses:
        200:
          description: Created a new game room.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
              example:
                id: 4452fd22-fde1-11ea-adc1-0242ac120002
                game_type: "quibly"
                code: "ABCD"
                state:
                  stage: waiting
                  turn: 0
                  questions: []
                  player_data: {}
      x-swagger-router-controller: banter_bus.web.controllers.room_controller
      x-codegen-request-body-name: body
  /room/{room_id}:
    get:
      tags:
        - room
      summary: get a game room.
      operationId: get_room_details
      parameters:
        - name: room_id
          in: path
          description: The id of the room to retrieve.
          required: true
          schema:
            $ref: "#/components/schemas/RoomID"
      responses:
        200:
          description: Game room retrieved.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Room"
              example:
                id: 4452fd22-fde1-11ea-adc1-0242ac120002
                game_type: "quibly"
                code: "ABCD"
                state:
                  stage: waiting
                  turn: 0
                  questions: []
                  player_data: {}
        404:
          description: The game room does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "room_does_not_exist_error"
                message: "Failed fetch room with id 1. Room does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.room_controller
  /room/{room_id}/state:
    patch:
      tags:
        - room
      summary: Update a room's state.
      operationId: update_room_state
      parameters:
        - name: room_id
          in: path
          description: The id of the room to update.
          required: true
          schema:
            $ref: "#/components/schemas/RoomID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        200:
          description: Room state updated.
          content: {}
        404:
          description: The game room does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "room_does_not_exist_error"
                message: "Failed to add player with id 1 to room with id 1. Room does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.room_controller
      x-codegen-request-body-name: body
  /room/{room_id}/player:
    post:
      tags:
        - player
      summary: Add a new player to the game room.
      operationId: add_player_to_room
      parameters:
        - name: room_id
          in: path
          description: The id of the room to update.
          required: true
          schema:
            $ref: "#/components/schemas/RoomID"
      requestBody:
        description: Player to add to game room.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Player"
            example:
              name: "Johniver"
        required: true
      responses:
        200:
          description: Add a player to a game room.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Player"
              example:
                player_id: 4452fd22-fde1-11ea-adc1-0242ac120002
                name: "Johniver"
        404:
          description: The game room does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "room_does_not_exist_error"
                message: "Failed to add player with name 'xyz' to room with id 1. Room does not exist."
        409:
          description: The player already exists in the game room. Or the game has already started therefore players cannot be added.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "player_exists_error"
                message: "Failed to add player with name 'xyz' to room with id 1. Player already exists in room."
      x-swagger-router-controller: banter_bus.web.controllers.room_controller
      x-codegen-request-body-name: body
  /room/{room_id}/player/{player_id}/state:
    patch:
      tags:
        - player
      summary: Update a player.
      operationId: update_player
      parameters:
        - name: room_id
          in: path
          description: The id of the room to update.
          required: true
          schema:
            $ref: "#/components/schemas/RoomID"
        - name: player_id
          in: path
          description: The id of the player to remove.
          required: true
          schema:
            $ref: "#/components/schemas/PlayerID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        200:
          description: Player state updated.
          content: {}
        404:
          description: The game room or player does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "room_does_not_exist_error"
                message: "Failed to add player with id 1 to room with id 1. Room does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.room_controller
      x-codegen-request-body-name: body
    get:
      tags:
        - player
      summary: Get a player's state.
      operationId: get_player_state
      parameters:
        - name: room_id
          in: path
          description: The id of the room the player in.
          required: true
          schema:
            $ref: "#/components/schemas/RoomID"
        - name: player_id
          in: path
          description: The id of the player to retrieve.
          required: true
          schema:
            $ref: "#/components/schemas/PlayerID"
      responses:
        200:
          description: Successfully retrieved player state.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlayerState"
              example:
                stage: "waiting"
                ranking: {}
                time_stamp: ""
                likes: {}
                votes: {}
                my_turn: false
                questions: []
                answers: []
        404:
          description: The game room does not exist or the player does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "room_does_not_exist_error"
                message: "Failed to add player with id 1 to room with id 1. Room does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.room_controller
      x-codegen-request-body-name: body
  /room/{room_id}/player/{player_id}:
    delete:
      tags:
        - player
      summary: Removes a player from the room
      operationId: remove_player_from_room
      parameters:
        - name: room_id
          in: path
          description: The id of the room to remove the player from.
          required: true
          schema:
            $ref: "#/components/schemas/RoomID"
        - name: player_id
          in: path
          description: The id of the player to remove.
          required: true
          schema:
            $ref: "#/components/schemas/PlayerID"
      responses:
        200:
          description: Removed player from the room.
          content: {}
        404:
          description: The game room does not exist, or player does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "room_does_not_exist_error"
                message: "Failed to remove player with id 1 to room with id 1. Room does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.room_controller
      x-codegen-request-body-name: body
  /game:
    get:
      tags:
        - game
      summary: Get all game types.
      operationId: get_all_game_type
      responses:
        200:
          description: All the game types.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Game"
      x-swagger-router-controller: banter_bus.web.controllers.game_controller
      x-codegen-request-body-name: body
    post:
      tags:
        - game
      summary: Create a new game type.
      operationId: create_game_type
      requestBody:
        description: Details of the new game to create.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewGame"
        required: true
      responses:
        200:
          description: Created a new game type.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
      x-swagger-router-controller: banter_bus.web.controllers.game_controller
      x-codegen-request-body-name: body
  /game/{game_id}/question:
    post:
      tags:
        - question
      summary: Add a new question to a game.
      operationId: add_question_to_game
      parameters:
        - name: game_id
          in: path
          description: The id of the game to add the question to.
          required: true
          schema:
            type: string
      requestBody:
        description: Details of the question to add.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewQuestion"
        required: true
      responses:
        200:
          description: Added question to game.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Game"
        404:
          description: The game id does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "game_does_not_exist_error"
                message: "Failed to add question to game with id 1. Game does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.question_controller
      x-codegen-request-body-name: body
  /game/{game_id}/question/{question_id}:
    get:
      tags:
        - question
      summary: Get a question from a game.
      operationId: get_question_from_game
      parameters:
        - name: game_id
          in: path
          description: The id of the game to get the question to.
          required: true
          schema:
            type: string
        - name: question_id
          in: path
          description: The id of the question to get.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Retrieved question.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Question"
        404:
          description: The game id does not exist or the question id does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "game_does_not_exist_error"
                message: "Failed to add question to game with id 1. Game does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.question_controller
    delete:
      tags:
        - question
      summary: Remove a question from a game.
      operationId: delete_a_question_from_game
      parameters:
        - name: game_id
          in: path
          description: The id of the game to remove the question to.
          required: true
          schema:
            type: string
        - name: question_id
          in: path
          description: The id of the question to remove.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Removed question from game.
          content: {}
        404:
          description: The game id does not exist or the question id does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "game_does_not_exist_error"
                message: "Failed to add question to game with id 1. Game does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.question_controller
    patch:
      tags:
        - question
      summary: Update a question.
      operationId: update_question
      parameters:
        - name: game_id
          in: path
          description: The id of the game to update.
          required: true
          schema:
            type: string
        - name: question_id
          in: path
          description: The id of the question to update.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        200:
          description: Player state updated.
          content: {}
        404:
          description: The game room or question does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APIError"
              example:
                error_type: "questioned_does_not_exist_error"
                message: "Failed to update question with id 1. Question does not exist."
      x-swagger-router-controller: banter_bus.web.controllers.question_controller
      x-codegen-request-body-name: body
components:
  schemas:
    APIError:
      required:
        - error_type
        - message
      type: object
      properties:
        error_type:
          type: string
        message:
          type: string
    NewRoom:
      required:
        - game_type
      type: object
      properties:
        game_type:
          type: string
    NewGame:
      required:
        - game_name
      type: object
      properties:
        game_name:
          type: string
    NewQuestion:
      required:
        - question
      properties:
        question:
          type: string
    PlayerID:
      type: string
    RoomID:
      type: string
    GameID:
      type: string
    Room:
      required:
        - id
        - game_type
        - urls
        - code
        - state
      type: object
      properties:
        id:
          type: integer
          format: int32
        urls:
          type: object
          properties:
            shareable_url:
              type: string
            host_url:
              type: string
        game_type:
          type: string
          enum:
            - fibbing_it
            - illustratium
            - quibly
        code:
          type: string
        state:
          $ref: "#/components/schemas/State"
    Game:
      required:
        - id
        - name
      type: object
      properties:
        id:
          $ref: "#/components/schemas/GameID"
        name:
          type: string
        questions:
          type: array
          items:
            $ref: "#/components/schemas/Question"
      example:
        id: 4452fd22-fde1-11ea-adc1-0242ac120002
        name: "poker_face"
        questions: []
    Question:
      required:
        - id
        - question
      properties:
        id:
          type: integer
          format: int32
        question:
          type: string
    Player:
      type: object
      required:
        - name
      properties:
        player_id:
          $ref: "#/components/schemas/PlayerID"
        name:
          type: string
    BasicPlayerData:
      type: object
      properties:
        name:
          type: string
        votes:
          type: integer
          format: int32
        points:
          type: integer
          format: int32
        likes:
          type: integer
          format: int32
        time_stamp:
          type: string
          format: date-timeState
    State:
      oneOf:
        - $ref: "#/components/schemas/QuiblyState"
        - $ref: "#/components/schemas/FibbingItState"
        - $ref: "#/components/schemas/IllustratiumState"
    QuiblyState:
      required:
        - stage
        - turn
        - questions_to_ask
        - question_asked
        - player_data
      type: object
      properties:
        stage:
          $ref: "#/components/schemas/QuiblyStages"
        turn:
          type: integer
          format: int32
        questions:
          type: array
          items:
            type: integer
            format: int32
        player_data:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/QuiblyPlayerData"
    QuiblyStages:
      type: string
      enum:
        - waiting
        - sending_questions
        - answering_questions
        - showing_questions
        - voting
        - reveal
    QuiblyPlayerData:
      allOf:
        - $ref: "#/components/schemas/BasicPlayerData"
        - type: object
          properties:
            questions:
              type: object
              additionalProperties:
                type: object
                properties:
                  answer:
                    type: string
    FibbingItState:
      required:
        - stage
        - turn
        - board
        - game_master
        - player_data
      type: object
      properties:
        stage:
          $ref: "#/components/schemas/FibbingItStages"
        turn:
          type: integer
          format: int32
        board:
          type: array
          items:
            type: string
        game_master:
          properties:
            current_player:
              type: integer
              format: int32
        rounds:
          type: array
          items:
            type: object
            properties:
              round_number:
                type: integer
                format: int32
              vote:
                type: array
                items:
                  $ref: "#/components/schemas/FibbingVote"
        player_data:
          type: object
          properties:
            player_id:
              additionalProperties:
                $ref: "#/components/schemas/FibbingItPlayerData"
    FibbingItStages:
      type: string
      enum:
        - waiting
        - sending_roles
        - playing
        - reveal
    FibbingItPlayerData:
      allOf:
        - $ref: "#/components/schemas/BasicPlayerData"
        - type: object
          properties:
            role:
              $ref: "#/components/schemas/FibbingRoles"
    FibbingVote:
      type: string
      enum:
        - pass
        - fail
        - na
    FibbingRoles:
      type: string
      enum:
        - alien
        - human
    IllustratiumState:
      required:
        - stage
        - turn
        - questions
        - guess
        - player_data
      type: object
      properties:
        stage:
          $ref: "#/components/schemas/IllustratiumStages"
        turn:
          type: integer
          format: int32
        questions:
          type: array
          items:
            type: integer
            format: int32
        guess:
          type: object
          additionalProperties:
            type: object
            properties:
              player_id:
                type: object
                properties:
                  answer:
                    type: string
        player_data:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/IllustratiumPlayerData"
    IllustratiumStages:
      type: string
      enum:
        - waiting
        - sending_questions
        - drawing
        - showing_image
        - guessing
        - reveal
    IllustratiumPlayerData:
      allOf:
        - $ref: "#/components/schemas/BasicPlayerData"
        - type: object
          properties:
            questions:
              type: object
              additionalProperties:
                type: object
                properties:
                  color:
                    type: string
                  question_id:
                    type: integer
                    format: int32
                  image:
                    type: string
    PlayerState:
      oneOf:
        - $ref: "#/components/schemas/QuiblyPlayerState"
        - $ref: "#/components/schemas/FibbingItPlayerState"
        - $ref: "#/components/schemas/IllustratiumPlayerState"
    QuiblyPlayerState:
      type: object
      properties:
        stage:
          $ref: "#/components/schemas/QuiblyStages"
        ranking:
          type: object
          properties:
            points:
              type: array
              items:
                type: object
                properties:
                  player_id:
                    type: object
                    properties:
                      points:
                        type: integer
                        format: int32
            likes:
              type: array
              items:
                type: object
                properties:
                  player_id:
                    type: object
                    properties:
                      likes:
                        type: integer
                        format: int32
        time_stamp:
          type: string
          format: date-time
        questions:
          type: array
          items:
            type: string
        likes:
          type: object
          properties:
            my_likes:
              type: array
              items:
                type: integer
                format: int32
            other_likes:
              type: object
              properties:
                player_id:
                  $ref: "#/components/schemas/PlayerID"
        votes:
          type: object
          properties:
            my_vote:
              type: object
              properties:
                answer:
                  type: string
            other_vote:
              type: object
              properties:
                player_id:
                  $ref: "#/components/schemas/PlayerID"
        my_turn:
          type: boolean
        answers:
          oneOf:
            - type: array
              items:
                type: string
            - type: object
              properties:
                player_id:
                  type: object
                  properties:
                    answer:
                      type: string
    FibbingItPlayerState:
      type: object
      properties:
        stage:
          $ref: "#/components/schemas/FibbingItStages"
        ranking:
          type: object
          properties:
            winning_role:
              $ref: "#/components/schemas/FibbingRoles"
            winners:
              type: array
              items:
                type: integer
                format: int32
            losers:
              type: array
              items:
                type: integer
                format: int32
        game_master:
          type: object
          properties:
            player_id:
              $ref: "#/components/schemas/PlayerID"
        time_stamp:
          type: string
          format: date-time
        votes:
          type: array
          items:
            $ref: "#/components/schemas/FibbingVote"
        board:
          type: array
          items:
            $ref: "#/components/schemas/FibbingVote"
        role:
          $ref: "#/components/schemas/FibbingRoles"
    IllustratiumPlayerState:
      type: object
      properties:
        stage:
          $ref: "#/components/schemas/IllustratiumStages"
        ranking:
          type: object
          properties:
            points:
              type: array
              items:
                type: object
                properties:
                  player_id:
                    type: object
                    properties:
                      points:
                        type: integer
                        format: int32
            likes:
              type: array
              items:
                type: object
                properties:
                  player_id:
                    type: object
                    properties:
                      likes:
                        type: integer
                        format: int32
        time_stamp:
          type: string
          format: date-time
        color:
          type: string
        question:
          type: string
        likes:
          type: object
          properties:
            my_likes:
              type: array
              items:
                type: integer
                format: int32
            other_likes:
              type: object
              properties:
                player_id:
                  $ref: "#/components/schemas/PlayerID"
        image:
          type: object
          properties:
            base64:
              type: string
            player_id:
              $ref: "#/components/schemas/PlayerID"
        votes:
          type: object
          properties:
            my_vote:
              type: object
              properties:
                player_id:
                  $ref: "#/components/schemas/PlayerID"
            other_vote:
              type: object
              properties:
                player_id:
                  $ref: "#/components/schemas/PlayerID"
        my_turn:
          type: boolean
        answers:
          oneOf:
            - type: array
              items:
                type: string
            - type: object
              properties:
                player_id:
                  type: object
                  properties:
                    answer:
                      type: string
    PatchRequest:
      type: array
      items:
        $ref: "#/components/schemas/PatchDocument"
    PatchDocument:
      description: A JSONPatch document as defined by RFC 6902
      required:
        - "op"
        - "path"
      properties:
        op:
          type: string
          description: The operation to be performed
          enum:
            - "add"
            - "remove"
            - "replace"
            - "move"
            - "copy"
            - "test"
        path:
          type: string
          description: A JSON-Pointer
        value:
          type: object
          description: The value to be used within the operations.
        from:
          type: string
          description: A string containing a JSON Pointer value.
